<?xml version="1.0" encoding="UTF-8"?><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><meta name="copyright" content=""/><link type="text/css" href="user.css" rel="stylesheet"/><script type="text/javascript" charset="utf-8" src="files/slidy/scripts/slidy.js"/></head><body><div class="background"/><div class="slide cover title"><h1 class="title">Reladomo Mini Kata</h1></div><a name="N10013"/><div class="slide"><h1 class="title">Quick Intro
        </h1><ul class=""><li class="listitem"><p>Reladomo is not your typical ORM !
                    </p><ul class=""><li class="listitem"><p>Temporal chaining logic
                            </p></li><li class="listitem"><p>Object oriented, compiled, type-checked, query language
                            </p></li><li class="listitem"><p>Transparent multi-schema support
                            </p></li><li class="listitem"><p>Object oriented batch operations
                            </p></li><li class="listitem"><p>Unit testable code
                            </p></li><li class="listitem"><p>Flexible object relationship inflation
                            </p></li></ul><p>
                </p></li><li class="listitem"><p>What is a Code Kata?
                    </p><p>
                        <span class="strong"><strong>
                            <span class="emphasis"><em>A programming exercise which helps hone your skills through practice.</em></span>
                        </strong></span>
                    </p><p>
                </p></li></ul></div><a name="N1003F"/><div class="slide"><h1 class="title">A Simple Reladomo Example</h1><ul class=""><li class="listitem"><p>A first object: Person
                </p></li><li class="listitem"><p>Reladomo Generation
                </p></li><li class="listitem"><p>Reladomo Runtime Class List
                </p></li></ul></div><a name="N1004F"/><div class="slide">
            <h1 class="title">A first object: Person
            </h1>
            <ul class=""><li class="listitem"><p>Consider a simple object representing a person:
                        </p><table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="20%"><tr><td align="center"><img src="PersonUML.png" align="middle" width="100%"/></td></tr></table><p>
                    </p></li><li class="listitem"><p>First thing to do, is create the Reladomo XML that describes this object.
                    </p></li><li class="listitem"><p>For the Kata, we have created this object for you.
                    </p></li><li class="listitem"><p>You can see this definition in the
                        <code class="code">Person.xml</code>
                        file.
                    </p></li></ul>
            <p>Reladomo Person definition</p>
            <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="90%"><tr><td align="center"><img src="PersonXML.png" align="middle" width="100%"/></td></tr></table>
        </div><a name="N10077"/><div class="slide">
            <h1 class="title">Reladomo Generation
            </h1>
            <ul class=""><li class="listitem"><p>Reladomo needs to know the list of objects you want to work with.</p></li><ul class=""><li class="listitem"><p>Use a Reladomo "class list" XML file to declare this
                        </p></li><li class="listitem"><p>For the kata, it's defined in:
                            <code class="code">MithraTestAppClassList.xml</code>
                        </p></li></ul><li class="listitem"><p>The next step is to convert these definitions into objects we can use.</p></li><li class="listitem"><p>We call this step Reladomo Generation, and it results in Java source files.</p></li></ul>
            <p>Reladomo Class List -&gt; Objects</p>
            <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="90%"><tr><td align="center"><img src="ReladomoGen.png" align="middle" width="100%"/></td></tr></table>
        </div><a name="N1009C"/><div class="slide">
            <h1 class="title">Reladomo Generation
            </h1>
            <ul class=""><li class="listitem"><p>Items above the blue line are always generated by Reladomo, and are never checked in to VCS
                        (i.e. never committed to Git or Subversion).
                    </p></li><li class="listitem"><p>Items below the blue line are generated once only.</p></li><ul class=""><li class="listitem"><p>You add your business specific code here, and check them in.
                        </p></li></ul></ul>
            <p>Generated Classes</p>
            <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="90%"><tr><td align="center"><img src="GeneratedClasses.png" align="middle" width="100%"/></td></tr></table>
        </div><a name="N100B8"/><div class="slide">
            <h1 class="title">Reladomo Generation - build integration
            </h1>
            <ul class=""><li class="listitem"><p>See the FAQ for integrating with Ant, Maven or Gradle.</p></li><li class="listitem"><p>Structure your build so that generation happens before compile.</p><ul class=""><li class="listitem"><p>For the Kata, the Maven "test" target will generate sources, compile and run tests.
                            </p></li></ul></li></ul>
        </div><a name="N100CA"/><div class="slide">
            <h1 class="title">Reladomo Runtime Class List
            </h1>
            <ul class=""><li class="listitem"><p>Reladomo needs to know the list of objects and their behavior at runtime.
                        </p><ul class=""><li class="listitem"><p>Typically this is the same as those listed in the Reladomo "class list", however,
                                    they can be different, like a subset, for example.
                                </p></li><li class="listitem"><p>For the kata, it's defined in:
                                    <code class="code">TestMithraRuntimeConfig.xml</code>
                                </p></li></ul><p>
                    </p><p>Example Reladomo "class list" XML</p><pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;MithraRuntime</strong>
    <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">xmlns:xsi</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"http://www.w3.org/2001/XMLSchema-instance"</span>
    <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">xsi:noNamespaceSchemaLocation</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"../../mithra/mithraruntime.xsd"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&gt;</strong>
    <strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;ConnectionManager</strong>
        <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">className</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"com.gs.fw.common.mithra.test.ConnectionManagerForTests"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&gt;</strong>
            <strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;MithraObjectConfiguration</strong>
                <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">cacheType</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"partial"</span>
                <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">className</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"kata.domain.Person"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">
            /&gt;</strong>
    <strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/ConnectionManager&gt;</strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/MithraRuntime&gt;</strong></pre></li><li class="listitem"><p>Contains connection properties, caching mode and similar properties required at runtime.
                    </p></li></ul>
        </div><a name="N100E9"/><div class="slide"><h1 class="title">Basic Finder Patterns</h1><ul class=""><li class="listitem"><p>Basic fetch
                </p></li><li class="listitem"><p>Your Friend: Finder
                </p></li></ul></div><a name="N100F6"/><div class="slide">
            <h1 class="title">Basic Fetch
            </h1>
            <ul class=""><li class="listitem"><p>Fetch all the rows for
                        <code class="code">Person</code>
                        from the DB as
                        <code class="code">Person</code>
                        objects
                    </p></li><li class="listitem"><p>Fetch specific rows for
                        <code class="code">Person</code>
                        from the DB as
                        <code class="code">Person</code>
                        objects
                    </p></li><li class="listitem"><p>We use a
                        <code class="code">List</code>
                        to hold many objects
                    </p><ul class=""><li class="listitem"><p>Reladomo generates a typed-list for us, called
                                <code class="code">PersonList</code>
                            </p></li></ul></li><li class="listitem"><p>How do we tell Reladomo which rows to fetch?
                    </p></li></ul>
            <p>SQL</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> * <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> PERSON
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">GO</span></strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> * <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> PERSON <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> LAST_NAME = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'Smith'</span></strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">GO</span></strong></pre>
            <p>Java</p>
            <pre class="programlisting">PersonList people = PersonFinder.findMany(PersonFinder.all());
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Reladomo executes: SELECT * FROM PERSON</em>

Verify.assertSize(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">8</span>, people);

PersonList smiths = PersonFinder.findMany(PersonFinder.lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>));
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Reladomo executes: SELECT * FROM PERSON WHERE LAST_NAME = 'Smith'</em>

Verify.assertSize(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">3</span>, smiths);</pre>

        </div><a name="N1012E"/><div class="slide">
            <h1 class="title">Basic Fetch
            </h1>
            <ul class=""><li class="listitem"><p>Fetch a specific row from the DB as a
                        <code class="code">Person</code>
                        object.
                    </p></li><li class="listitem"><p>How do we tell Reladomo which row to fetch?
                    </p></li><li class="listitem"><p>How do we specify we expect one object?
                    </p></li></ul>
            <p>SQL</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> * <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> PERSON <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> PERSON_ID = <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">5</span>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">GO</span></strong></pre>
            <p>Java</p>
            <pre class="programlisting">Person person = PersonFinder.findByPrimaryKey(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">5</span>);
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Reladomo executes: SELECT * FROM PERSON WHERE PERSON_ID = 5</em>

Person person = PersonFinder.findOne(PersonFinder.personId().eq(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">5</span>)) ;
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Reladomo executes: SELECT * FROM PERSON WHERE PERSON_ID = 5</em></pre>
        </div><a name="N10150"/><div class="slide">
            <h1 class="title">Your Friend: Finder
            </h1>
            <ul class=""><li class="listitem"><p>
                        <code class="code">PersonFinder</code>
                        is how we describe the criteria of what we want.
                    </p></li><li class="listitem"><p>A finder has a method for every attribute on your object:
                        </p><ul class=""><li class="listitem"><p>
                                    <code class="code">PersonFinder.personId()</code>
                                </p></li><li class="listitem"><p>
                                    <code class="code">PersonFinder.firstName()</code>
                                </p></li></ul><p>
                    </p></li><li class="listitem"><p>Every Reladomo attribute has methods on it to define common operations
                    </p></li><li class="listitem"><p>Finders have Attributes representing columns in the DB.
                        </p><ul class=""><li class="listitem"><p>Numeric attributes have mathematical functions available
                                </p></li><li class="listitem"><p>String attributes have String functions
                                </p></li></ul><p>
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting">Operation thisOperation = PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jake"</span></strong>);
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// SQL: WHERE FIRST_NAME = 'Jake'</em>

Operation thatOperation = PersonFinder.firstName().contains(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"oh"</span></strong>);
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// SQL: WHERE FIRST_NAME LIKE '%oh%'</em>

Operation thisOrThatOperation = thisOperation.or(thatOperation);
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// SQL WHERE FIRST_NAME = 'JAKE' OR FIRST_NAME LIKE '%oh%'</em>

PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jake"</span></strong>)

PersonFinder.firstName().notEq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jake"</span></strong>)

PersonFinder.firstName().contains(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"oh"</span></strong>)

PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jake"</span></strong>)
	.or(PersonFinder.firstName().contains(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"oh"</span></strong>))

PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Mary"</span></strong>)
	.and(PersonFinder.lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>))

PersonFinder.personId().in(IntHashSet.newSetWith(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span>, <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">2</span>, <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">3</span>))

PersonFinder.personId().notIn(IntHashSet.newSetWith(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span>, <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">2</span>, <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">3</span>))

PetFinder.petAge().greaterThan(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span>)

PetFinder.petAge().greaterThanEquals(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span>)

PersonFinder.firstName().isNull()

PersonFinder.firstName().isNotNull()</pre>
        </div><a name="N10185"/><div class="slide"><h1 class="title">Create, Update, Delete Patterns</h1><ul class=""><li class="listitem"><p>Creating an object
                </p></li><li class="listitem"><p>Inserting an object
                </p></li><li class="listitem"><p>Reladomo Uniquing
                </p></li><li class="listitem"><p>Simulated Sequences
                </p></li></ul></div><a name="N10198"/><div class="slide">
            <h1 class="title">Creating an object
            </h1>
            <ul class=""><li class="listitem"><p>Use the Java keyword new
                    </p></li><li class="listitem"><p>Call setters to assign values to the object attributes
                    </p></li><li class="listitem"><p>Creating a custom constructor may help correctness, and aid refactoring
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting"><em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Option 1</em>
Person janeDoe = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person();
janeDoe.setFirstName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>);
janeDoe.setLastName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>);

<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Option 2</em>
Person janeDoe = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>);</pre>
        </div><a name="N101B0"/><div class="slide">
            <h1 class="title">Creating an object
            </h1>
            <ul class=""><li class="listitem"><p>Creating a custom constructor may help correctness, and aid refactoring
                    </p></li><li class="listitem"><p>Never change the no-arg constructor – Reladomo uses that!
                    </p></li><li class="listitem"><p>Always remember to call the no-arg constructor
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">class</span></strong> Person <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">extends</span></strong> PersonAbstract
{
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> Person()
    {
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">super</span></strong>();
        <em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// You must not modify this constructor. Reladomo calls this internally.</em>
        <em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// You can call this constructor. You can also add new constructors.</em>
    }
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> Person(String firstName, String lastName)
    {
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">super</span></strong>();
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">this</span></strong>.setFirstName(firstName);
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">this</span></strong>.setLastName(lastName);
    }
}</pre>
        </div><a name="N101C8"/><div class="slide">
            <h1 class="title">Basic Fetch
            </h1>
            <ul class=""><li class="listitem"><p>Use the Reladomo provided method<code class="code">insert()</code>.
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting">Assert.assertNull(
        PersonFinder.findOne(
                PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>)));

<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Insert Jane. Do not keep the reference</em>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>).insert();

Person janeDoe = PersonFinder.findOne(PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>));

Assert.assertEquals(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, janeDoe.getFirstName());
Assert.assertEquals(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>, janeDoe.getLastName());</pre>
        </div><a name="N101DD"/><div class="slide">
            <h1 class="title">Reladomo Uniquing
            </h1>
            <ul class=""><li class="listitem"><p>Did Reladomo inflate a new copy of
                        <code class="code">janeDoe</code>
                        from the DB?
                    </p></li><li class="listitem"><p>Reladomo guarantees there is only one copy of a given persisted object in memory at any given
                        time
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting"><em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Insert Jane. Keep the reference</em>
Person janeDoe = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>);
janeDoe.insert();

Person janeDoeFromDb = PersonFinder.findOne(PersonFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>));
Assert.assertTrue(janeDoe.equals(janeDoeFromDb));
Assert.assertTrue(janeDoe == janeDoeFromDb);
</pre>
        </div><a name="N101F5"/><div class="slide">
            <h1 class="title">Simulated Sequences
            </h1>
            <ul class=""><li class="listitem"><p>Use the Reladomo provided method
                        <code class="code">insert()</code>
                    </p></li><li class="listitem"><p>Reladomo sets the sequence ID for the new
                        <code class="code">Person</code>
                        we created
                    </p></li><li class="listitem"><p>Sequence IDs are declared in the Reladomo XML Object definition
                    </p></li></ul>
            <p>SQL</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">INSERT</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">INTO</span></strong> PERSON(PERSON_ID, FIRST_NAME, LAST_NAME) <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">VALUES</span></strong> (<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">9</span>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'Jane'</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'Doe'</span></strong>) 
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">GO</span></strong> </pre>

            <p>Java</p>
            <pre class="programlisting">Person janeDoe = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>).insert();
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Generated SQL:</em>
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// insert into PERSON(PERSON_ID,FIRST_NAME,LAST_NAME) values (9,'Jane','Doe')</em>
System.out.println(janeDoe.getPersonId()); <em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Prints 9</em>
</pre>

            <p>XML</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;Attribute</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">name</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"personId"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">javaType</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"int"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">columnName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"PERSON_ID"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">primaryKey</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"true"</span>
               <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">primaryKeyGeneratorStrategy</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"SimulatedSequence"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&gt;</strong>
    <strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;SimulatedSequence</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">sequenceName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"Person"</span>
                       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">sequenceObjectFactoryName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"kata.util.ObjectSequenceObjectFactory"</span>
                       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">hasSourceAttribute</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"false"</span>
                       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">batchSize</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"10"</span>
                       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">initialValue</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"1"</span>
                       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">incrementSize</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"1"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">/&gt;</strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/Attribute&gt;</strong></pre>
        </div><a name="N10221"/><div class="slide">
            <h1 class="title">Insert, Update, Delete
            </h1>
            <ul class=""><li class="listitem"><p>Use the Reladomo provided methods.
                    </p></li></ul>
            <p>Single Insert
            </p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>, <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>).insert();</pre>
            <p>Single Update</p>
            <pre class="programlisting">janeDoe.setLastName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>);</pre>
            <p>Single Delete
            </p>
            <pre class="programlisting">janeDoe.delete();</pre>
            <p>Bulk Inserts
            </p>
            <pre class="programlisting">PersonList people = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> PersonList(
	FastList.newListWith(janeDoe, johnDoe));
people.insertAll();</pre>
            <p>Bulk Updates
            </p>
            <pre class="programlisting">people.setLastName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>);</pre>
            <p>Bulk Deletes
            </p>
            <pre class="programlisting">people.deleteAll();</pre>
        </div><a name="N10257"/><div class="slide"><h1 class="title">Kata Exercise 1</h1><ul class=""><li class="listitem"><p>Find tests starting with exercise1; they have failures.
                </p></li><li class="listitem"><p>Figure out how to get the tests to pass using what you have seen so far.
                </p></li><li class="listitem"><p>Should take about 15 minutes.
                </p></li></ul></div><a name="N10267"/><div class="slide">
            <h1 class="title">Exercise 1 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1GetAllPeople()
{
    PersonList people =
        PersonFinder.findMany(PersonFinder.all());
    Verify.assertSize(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">8</span>, people);
}

<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1GetAllSmiths()
{
    PersonList smiths =
        PersonFinder.findMany(
            PersonFinder.lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>));
    Verify.assertSize(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">3</span>, smiths);
}</pre>
        </div><a name="N10271"/><div class="slide">
            <h1 class="title">Exercise 1 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1GetAllPetsOfSmiths()
{
    MutableList&lt;Pet&gt; smithPets =
        PetFinder.findMany(
            PetFinder.owner().lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>)
        ).asGscList();
    ...
}

<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1GetAllPetsOlderThan1OrWuzzy()
{
    PetList oldPetsOrWuzzy =
        PetFinder.findMany(
            PetFinder.petAge().greaterThan(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span>)
                .or(PetFinder.petName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Wuzzy"</span></strong>)));
                ...
}</pre>
        </div><a name="N1027B"/><div class="slide">
            <h1 class="title">Exercise 1 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1UpdateSmithsFirstNamesToGeorge()
{
    ...
    PersonList smiths =
		PersonFinder.findMany(
			PersonFinder.lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>));
	smiths.setFirstName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"George"</span></strong>);
    ...
}

<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise1InsertJaneDoe()
{
    ...
    Person newPerson = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Person();
    newPerson.setFirstName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jane"</span></strong>);
    newPerson.setLastName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong>);
    newPerson.insert();
    ...
}</pre>
        </div><a name="N10286"/><div class="slide"><h1 class="title">Reladomo Test Resource</h1><p>Setting up test data</p><ul class=""><li class="listitem"><p>In the Reladomo Kata, we are using
                    <code class="code">MithraTestResource</code>
                    to help us
                    set up a test database to run our tests and examples against.
                </p></li><li class="listitem"><p>Test data is defined as a simple text file, with comma-delimited
                    values which represent the DB data
                </p></li></ul><p>Example Test Data for the
            <code class="code">Person</code>
            object
        </p><pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">class</span></strong> kata.domain.Person
personId, firstName, lastName
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">1</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Mary"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">2</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Bob"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">3</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Ted"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">4</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Jake"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Snake"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">5</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Barry"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Bird"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">6</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Terry"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Turtle"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">7</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Harry"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Hamster"</span></strong>
<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">8</span> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong> , <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Doe"</span></strong></pre></div><a name="N102A4"/><div class="slide"><h1 class="title">Relationships</h1><ul class=""><li class="listitem"><p>Declaring Relationships
                </p></li><li class="listitem"><p>Using Relationships
                </p></li><li class="listitem"><p>Relationship Existence
                </p></li></ul></div><a name="N102B4"/><div class="slide">
            <h1 class="title">Declaring Relationships
            </h1>
            <ul class=""><li class="listitem"><p>Relationships can be expressed in Reladomo's object XML
                    </p></li></ul>
            <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="60%"><tr><td align="center"><img src="CompanyRelationship.png" align="middle" width="100%"/></td></tr></table>
            <p>Company.xml</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;ClassName&gt;</strong>Company<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/ClassName&gt;</strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;Relationship</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">name</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"employees"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">cardinality</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"one-to-many"</span>
    <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">relatedObject</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"Employee"</span>
    <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">relatedIsDependent</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"true"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">reverseRelationshipName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"company"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&gt;</strong>
    this.companyId = Employee.companyId
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/Relationship&gt;</strong></pre>
            <p>Employee.xml</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;ClassName&gt;</strong>Employee<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/ClassName&gt;</strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;Relationship</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">name</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"location"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">cardinality</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"many-to-one"</span>
    <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">relatedObject</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"Location"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&gt;</strong>
    this.locationId = Location.locationId
<strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;/Relationship&gt;</strong></pre>

        </div><a name="N102D4"/><div class="slide">
            <h1 class="title">Using Relationships
            </h1>
            <ul class=""><li class="listitem"><p>Reladomo generates your relationship description into methods on the business objects
                    </p></li><li class="listitem"><p>How can we find
                        <code class="code">Company</code>
                        based on some related object?
                        </p><ul class=""><li class="listitem"><p>Finder is your friend!
                                </p></li><li class="listitem"><p>Relationships are navigable via the Finder
                                </p></li></ul><p>
                    </p></li></ul>
            <p>SQL</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> T0.COMPANY_ID, T0.COMPANY_NAME <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> COMPANY T0
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">INNER</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">JOIN</span></strong> (<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> E1.COMPANY_ID CID <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> EMPLOYEE E1
            <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> E1.LOCATION_ID = <span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">2</span>
            <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">GROUP</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">BY</span></strong> E1.COMPANY_ID) <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">as</span></strong> T1
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">on</span></strong> T0.COMPANY_ID = T1.CID</pre>

            <p>Java</p>
            <pre class="programlisting">CompanyList slcEmployees =
	CompanyFinder.findMany(
		CompanyFinder.employees().locationId().eq(Location.SLC));</pre>
        </div><a name="N102FB"/><div class="slide">
            <h1 class="title">Relationship Existence
            </h1>
            <ul class=""><li class="listitem"><p>You are interested in whether a relationship exists, but you are not interested in any part of
                        the related object
                    </p></li><li class="listitem"><p>Finder is your friend:
                        </p><ul class=""><li class="listitem"><p>
                                    <code class="code">exists()</code>
                                </p></li><li class="listitem"><p>
                                    <code class="code">notExists()</code>
                                </p></li></ul><p>
                    </p></li></ul>
            <p>SQL</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> T0.COMPANY_ID, T0.COMPANY_NAME <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> COMPANY T0
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">LEFT</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">JOIN</span></strong> (<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> E1.COMPANY_ID CID <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> EMPLOYEE E1) <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">as</span></strong> T1
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">on</span></strong> T0.COMPANY_ID = T1.CID
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> T1.CID <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">IS</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">NOT</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">NULL</span></strong></pre>

            <p>Java</p>
            <pre class="programlisting">CompanyList employers =
    CompanyFinder.findMany(CompanyFinder.employees().exists());

CompanyList nonEmployers =
    CompanyFinder.findMany(CompanyFinder.employees().notExists());</pre>
        </div><a name="N10326"/><div class="slide"><h1 class="title">Sorting</h1><ul class=""><li class="listitem"><p>How can we get objects in a certain order?
                    </p><ul class=""><li class="listitem"><p>Use<code class="code">MithraList</code>’s
                                <code class="code">addOrderBy()</code>
                                method
                            </p></li><li class="listitem"><p>Finder is your friend
                            </p></li></ul><p>
                </p></li><li class="listitem"><p>You can order by many different levels
                    </p><ul class=""><li class="listitem"><p>Call
                                <code class="code">addOrderBy()</code>
                                many times
                            </p></li><li class="listitem"><p>Or: call
                                <code class="code">setOrderBy()</code>
                                with a complex specification
                            </p></li></ul><p>
                </p></li></ul><p>Java</p><pre class="programlisting">EmployeeList employees = EmployeeFinder.findMany(EmployeeFinder.all());

employees.addOrderBy(EmployeeFinder.age().descendingOrderBy());
employees.addOrderBy(EmployeeFinder.firstName().ascendingOrderBy());</pre><p>Or</p><pre class="programlisting">employees.setOrderBy(
    EmployeeFinder.age().descendingOrderBy()
        .and(EmployeeFinder.firstName().ascendingOrderBy()));</pre></div><a name="N1035E"/><div class="slide"><h1 class="title">Deep Fetching</h1></div><a name="N10363"/><div class="slide">
            <h1 class="title">Deep Fetching
            </h1>
            <ul class=""><li class="listitem"><p>Deep fetching means retrieving not just immediate target objects, but also some or all of
                        their related objects
                    </p></li><li class="listitem"><p>Reladomo supports deep fetching via
                        <code class="code">MithraList.deepFetch()</code>
                        </p><ul class=""><li class="listitem"><p>Easier than writing code to fetch each set of objects yourself
                                </p></li><li class="listitem"><p>Allows Reladomo to perform optimizations to keep the query efficient
                                </p></li></ul><p>
                    </p></li><li class="listitem"><p>Use when you know the related objects will be accessed.
                    </p></li><li class="listitem"><p>Reladomo does not actually execute an operation on a list until the list is actually accessed.
                        This feature is usually totally transparent to the developer.
                    </p></li><li class="listitem"><p>Strictly, Reladomo might not fetch anything from the DB at all if it knows it has the objects
                        in cache,
                        but it might have to fetch some or all if they are not currently available.
                    </p></li></ul>
        </div><a name="N10385"/><div class="slide">
            <h1 class="title">Deep Fetch Effects
            </h1>
            <p>Without deep fetch</p>
            <pre class="programlisting">CompanyList companies =
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> CompanyList(CompanyFinder.city().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"London"</span></strong>));

<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// One hit to DB</em>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">for</span></strong> (Company company : companies)
{
    EmployeeList employees = company.getEmployees(); <em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Hit DB each time</em>
    System.out.println(
        company.getCompanyName() + <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">" employs:"</span></strong> + employees);
}</pre>
            <p>With deep fetch</p>
            <pre class="programlisting">CompanyList companies =
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> CompanyList(CompanyFinder.city().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"London"</span></strong>));
companies.deepFetch(CompanyFinder.employees());

<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Two hits to DB. One for Company, one for related Suppliers</em>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">for</span></strong> (Company company : companies)
{
    EmployeeList employees = company.getEmployees(); <em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// no DB hit</em>
    System.out.println(
        company.getCompanyName() + <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">" employs:"</span></strong> + employees);
}</pre>
        </div><a name="N1039A"/><div class="slide"><h1 class="title">Kata Exercise 2</h1><ul class=""><li class="listitem"><p>Find tests starting with exercise2; they have failures.
                </p></li><li class="listitem"><p>Figure out how to get the tests to pass using what you have seen so far.
                </p></li><li class="listitem"><p>Should take about 15 minutes.
                </p></li></ul></div><a name="N103AA"/><div class="slide">
            <h1 class="title">Exercise 2 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong>
exercise2GetAllPetsDescendingOrderedByAgeAndAscendingByName()
{
    PetList pets = PetFinder.findMany(PetFinder.all());

    pets.setOrderBy(
        PetFinder.petAge().descendingOrderBy()
            .and(PetFinder.petName().ascendingOrderBy()));
    ...
}

<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise2GetAllPeopleWithPets()
{
    PersonList petPeople =
        PersonFinder.findMany(PersonFinder.pets().exists());
    ...
}</pre>
        </div><a name="N103B4"/><div class="slide">
            <h1 class="title">Exercise 2 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise2GetAllDogLovers()
{
    PersonList dogLovers =
        PersonFinder.findMany(
            PersonFinder.pets().petTypeId()
                .eq(PetType.DOG_ID));
    ...
}

<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise2GetAllObjectsInMinDBHits()
{
    ...
    PersonList people =
        PersonFinder.findMany(PersonFinder.all());
    people.deepFetch(PersonFinder.pets().petTypes());
    ...
}</pre>
        </div><a name="N103BE"/><div class="slide">
            <h1 class="title">Exercise 2 Solutions
            </h1>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise2GetAllHamsterLovers()
{
    PersonList hamsterLovers =
        PersonFinder.findMany(
            PersonFinder.pets().petTypeId()
                .eq(PetType.HAMSTER_ID));
    ...
}</pre>
        </div><a name="N103C9"/><div class="slide"><h1 class="title">Advanced Finder: A Peek</h1><ul class=""><li class="listitem"><p>Counting rows
                </p></li><li class="listitem"><p>Aggregates
                </p></li></ul></div><a name="N103D6"/><div class="slide">
            <h1 class="title">Counting rows</h1>
            <ul class=""><li class="listitem"><p>
                        <code class="code">MithraList.size()</code>
                        will cause the list to be populated with data
                    </p></li><li class="listitem"><p>
                        <code class="code">MithraList.count()</code>
                        will issue a SELECT COUNT(*) call and return only the count
                    </p></li><li class="listitem"><p>Only use
                        <code class="code">count()</code>
                        when you know you will not need any of the contents of the list
                    </p></li></ul>
            <p>Java</p>
            <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">int</span></strong> companyCount = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> CompanyList(CompanyFinder.all()).size();
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">int</span></strong> companyCount = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> CompanyList(CompanyFinder.all()).count();</pre>
        </div><a name="N103F7"/><div class="slide">
            <h1 class="title">Aggregates</h1>
            <ul class=""><li class="listitem"><p>Gives you access to SQL-like features for<code class="code">sum(), average(), min(), max()</code>, etc.
                    </p></li><li class="listitem"><p>Remember your friend: Finder</p></li><li class="listitem"><p>Use it on Reladomo provided
                        <code class="code">AggregateList</code>
                    </p></li></ul>

            <p>Java</p>
            <pre class="programlisting">AggregateList aggregateList = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> AggregateList(EmployeeFinder.all());
aggregateList.addAggregateAttribute(
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"employeeAge"</span></strong>, EmployeeFinder.age().sum())
aggregateList.addGroupBy(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"companyId"</span></strong>, EmployeeFinder.companyId());
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">int</span></strong> sumAge = aggregateList.get(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">0</span>).getAttributeAsInt(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"employeeAge"</span></strong>);</pre>
        </div><a name="N10415"/><div class="slide">
            <h1 class="title">
                Aggregates
            </h1>
            <pre class="programlisting">AggregateList aggregateList = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> AggregateList(EmployeeFinder.all());
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Min Employee age</em>
aggregateList.addAggregateAttribute(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"minAge"</span></strong>, EmployeeFinder.age().min())
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Max Employee age</em>
aggregateList.addAggregateAttribute(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"maxAge"</span></strong>, EmployeeFinder.age().max())
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Average Employee age</em>
aggregateList.addAggregateAttribute(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"avgAge"</span></strong>, EmployeeFinder.age().avg())
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Group By Location</em>
aggregateList.addGroupBy(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"locationId"</span></strong>, EmployeeFinder.locationId())
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Count</em>
aggregateList.addAggregateAttribute(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"count"</span></strong>, EmployeeFinder.locationId().count())</pre>
        </div><a name="N10420"/><div class="slide">
        <h1 class="title">
            Chaining: Introduction
        </h1>
        <ul class=""><li class="listitem"><p>Commonly referred to as "milestoning".</p></li><li class="listitem"><p>Chaining or bitemporal data :</p></li><ul class=""><li class="listitem"><p>Umbrella term that describes a way of storing time series data and audit data in a relational
                        database.
                    </p></li></ul><li class="listitem"><p>Audit only data:</p></li><ul class=""><li class="listitem"><p>All edits to an object must be tracked</p></li><li class="listitem"><p>Audit Trail is immutable. Equivalent to a history book</p></li></ul><li class="listitem"><p>Terminology:</p></li><ul class=""><li class="listitem"><p>Academic literature calls the time that a particular piece of data changed as the "transaction
                        time",
                        but we often call it "processing
                        date" (even though it's a date-time)
                    </p></li><li class="listitem"><p>We tend to call the actual date-times that changes happen, "in" and "out", or sometimes,
                        "IN_Z" and "OUT_Z"
                    </p></li></ul></ul>
    </div><a name="N10446"/><div class="slide">
        <h1 class="title">
            Chaining: Audit Only: Introduction
        </h1>
        <ul class=""><li class="listitem"><p>Consider an Employee object</p></li><ul class=""><li class="listitem"><p>First we insert a new object John on 2014-01-15 10:59 am</p></li></ul></ul>

        <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="100%"><tr><td align="center"><img src="audittable1.png" align="middle" width="100%"/></td></tr></table>

    </div><a name="N1045C"/><div class="slide">
        <h1 class="title">Chaining: Audit Only: Introduction</h1>
        <ul class=""><li class="listitem"><p>Consider an Employee object</p></li><ul class=""><li class="listitem"><p>First we insert a new object John on 2014-01-15 10:59 am</p></li></ul></ul>

        <ul class=""><li class="listitem"><p>A year later John's age increases</p></li><li class="listitem">On 2015-01-15 10:59 am:</li><ul class=""><li class="listitem"><p>The existing row stops being valid, so we update its OUT value with</p></li><li class="listitem"><p>We insert a new row, valid from 2015-01-15 10:59 am through "infinity"
                    </p></li></ul><li class="listitem"><p>The process continues</p></li></ul>
        <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="100%"><tr><td align="center"><img src="audittable2.png" align="middle" width="100%"/></td></tr></table>
    </div><a name="N10484"/><div class="slide">
        <h1 class="title">
            Chaining: Audit Only: XML Definition
        </h1>
        <ul class=""><li class="listitem"><p>Reladomo Object XML defines an
                    <code class="code">AsOfAttribute</code>
                    element
                </p></li><li class="listitem"><p>Define one of these for your processingDate below the DefaultTable element, and before the regular
                    Attribute elements
                </p></li></ul>
        <p>
            Example
        </p>
        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">&lt;AsOfAttribute</strong> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">name</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"processingDate"</span>
       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">fromColumnName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"IN_Z"</span> <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">toColumnName</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"OUT_Z"</span>
       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">toIsInclusive</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"false"</span>
       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">isProcessingDate</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"true"</span>
       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">infinityDate</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"[kata.util.TimestampProvider.getInfinityDate()]"</span>
       <span  xmlns:xslthl="http://xslthl.sf.net" style="color: blue" class="hl-attribute">defaultIfNotSpecified</span>=<span  xmlns:xslthl="http://xslthl.sf.net" style="color: green" class="hl-value">"[kata.util.TimestampProvider.getInfinityDate()]"</span><strong  xmlns:xslthl="http://xslthl.sf.net" style="color: navy" class="hl-tag">
/&gt;</strong></pre>
    </div><a name="N1049C"/><div class="slide">
        <h1 class="title">
            Chaining: Audit Only: Queries
        </h1>
        <ul class=""><li class="listitem"><p>Query for "current" data:</p></li><ul class=""><li class="listitem"><p>Query just as you would any other data</p></li></ul><li class="listitem"><p>Query for an "as-of" processingDate:</p></li><li class="listitem">Just add the processing date you are interested in to the usual query</li></ul>
        <p>SQL</p>

        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> * <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> EMPLOYEE
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> FIRST_NAME = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'John'</span></strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">AND</span></strong> OUT_Z = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'9999-12-01 23:59:00.00'</span></strong>// Reladomo adds this
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">SELECT</span></strong> * <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">FROM</span></strong> EMPLOYEE
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">WHERE</span></strong> FIRST_NAME = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'John'</span></strong>
<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">AND</span></strong> IN_Z&lt;= <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'2014-02-13 23:59:00.00'</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">AND</span></strong> OUT_Z &gt; <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">'2014-02-13 23:59:00.00'</span></strong></pre>

        <p>Java</p>
        <pre class="programlisting"><em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Current data</em>
Employee john = EmployeeFinder.findOne(EmployeeFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong>));
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// As-of data</em>
Employee john = EmployeeFinder.findOne(EmployeeFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong>)
    .and(EmployeeFinder.processingDate().eq(timestamp13Feb2014)));</pre>
    </div><a name="N104BE"/><div class="slide">
        <h1 class="title">
            Chaining: Audit Only: Create, Update
        </h1>
        <ul class=""><li class="listitem"><p>All operations as normal except:</p></li><li class="listitem"><p>Create</p></li><ul class=""><li class="listitem"><p>Construct with the processingDate of "infinity"</p></li></ul><li class="listitem"><p>Update</p></li><ul class=""><li class="listitem"><p>Perform inside a transaction</p></li><li class="listitem"><p>Reladomo will milestone previous row and insert a new row</p></li></ul></ul>
        <p>
            Java
        </p>
        <pre class="programlisting">Employee john = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Employee(TimestampProvider.getInfinityDate());
john.setFirstName(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong>);
john.insert();
<em  xmlns:xslthl="http://xslthl.sf.net" style="color: gray" class="hl-comment">// Update a row</em>
MithraManagerProvider.getMithraManager().executeTransactionalCommand(
    tx -&gt; {
        Employee john = EmployeeFinder.findOne(
        EmployeeFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong>));
        john.setAge(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">26</span>);
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">return</span></strong> null;
    });</pre>

    </div><a name="N104E1"/><div class="slide">
        <h1 class="title">
            Chaining: Audit Only: Terminate
        </h1>
        <ul class=""><li class="listitem"><p>Rows are immutable, similar to history book</p></li><li class="listitem"><p>You cannot delete rows, however you can "terminate" them</p></li><li class="listitem"><p>Terminate -&gt; Update without inserting a new row</p></li><li class="listitem"><p>Similar to update perform inside a transaction</p></li><li class="listitem"><p>Use Reladomo provided
                    <code class="code">terminate()</code>
                    method
                </p></li></ul>
        <p>Java</p>
        <pre class="programlisting">MithraManagerProvider.getMithraManager().executeTransactionalCommand(
tx -&gt; {
Employee john = EmployeeFinder.findOne(
    EmployeeFinder.firstName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"John"</span></strong>));
    john.terminate();
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">return</span></strong> null;
});</pre>
    </div><a name="N10502"/><div class="slide">
        <h1 class="title">
            Exercise 3
        </h1>
        <ul class=""><li class="listitem"><p>Find tests starting with exercise3; they have failures.</p></li><li class="listitem"><p>Figure out how to get the tests to pass using what you have seen so far.</p></li><li class="listitem"><p>Should take about 20 minutes.</p></li></ul>
    </div><a name="N10513"/><div class="slide">
        <h1 class="title">
            Exercise 3 Solutions
        </h1>
        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise3GetTotalAgeOfAllSmithPets()
{
    ...
    AggregateList aggregateList = <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> AggregateList(
        PetFinder.owner().lastName().eq(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"Smith"</span></strong>));
    aggregateList.addAggregateAttribute(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"petAge"</span></strong>, PetFinder.petAge().sum());
    aggregateList.addGroupBy(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">"personId"</span></strong>, PetFinder.personId());
    ...
}</pre>
    </div><a name="N1051D"/><div class="slide">
        <h1 class="title">
            Exercise 3 Solutions
        </h1>
        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise3UpdateAgeOfSpeedyTo70()
{
    ...
    MithraManagerProvider.getMithraManager().executeTransactionalCommand(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> TransactionalCommand&lt;Pet&gt;()
    {
        <em  xmlns:xslthl="http://xslthl.sf.net"><span style="color: gray" class="hl-annotation">@Override</span></em>
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> Pet executeTransaction(MithraTransaction tx) <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">throws</span></strong> Throwable
        {
            Pet speedy = PetFinder.findOne(speedySelect);
            speedy.setPetAge(<span  xmlns:xslthl="http://xslthl.sf.net" style="color:blue" class="hl-number">70</span>);
            <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">return</span></strong> null;
        }
    });
    ...
}</pre>
    </div><a name="N10527"/><div class="slide">
        <h1 class="title">
            Exercise 3 Solutions
        </h1>
        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> exercise3MilestoneSpeedy()
{
    ...
    MithraManagerProvider.getMithraManager().executeTransactionalCommand(
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> TransactionalCommand&lt;Pet&gt;()
    {
        <em  xmlns:xslthl="http://xslthl.sf.net"><span style="color: gray" class="hl-annotation">@Override</span></em>
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> Pet executeTransaction(MithraTransaction tx) <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">throws</span></strong> Throwable
        {
            Pet speedy = PetFinder.findOne(speedySelect);
            speedy.terminate();
            <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">return</span></strong> null;
        }
    });
    ...
}</pre>
    </div><a name="N10531"/><div class="slide">
        <h1 class="title">
            MT Loader
        </h1>
        <ul class=""><li class="listitem"><p>Assume we have a simple table, Pet with pet's name and age</p></li><li class="listitem"><p>Primary key name: used to decide whether two sets match</p></li><li class="listitem"><p>Existing data DSet. Update feed FSet</p></li><ul class=""><li class="listitem"><p>Chirpy is in FSet but not in DSet so will be inserted</p></li><li class="listitem"><p>Speedy, Wuzzy are in DSet but not in FSet so will be closed out</p></li><li class="listitem"><p>Tabby is in both sets, so its age will be updated since it has changed</p></li><li class="listitem"><p>Fuzzy is in both sets but nothing has changed so we'll do nothing for Fuzzy.</p></li></ul></ul>
        <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="80%"><tr><td align="center"><img src="mtloader.png" align="middle" width="100%"/></td></tr></table>

    </div><a name="N10556"/><div class="slide">
        <h1 class="title">MT Loader</h1>
        <table border="0" summary="manufactured viewport for HTML img" style="cellpadding: 0; cellspacing: 0;" width="100%"><tr><td align="center"><img src="mtloader2.png" align="middle" width="100%"/></td></tr></table>

    </div><a name="N10563"/><div class="slide">
        <h1 class="title">Custom List methods</h1>
        <ul class=""><li class="listitem"><p>Just as you can add your own methods to the business objects, you can also add your own methods to
                    the lists
                </p></li><ul class=""><li class="listitem"><p>Always add your methods to the concrete class, never to the *Abstract classes
                    </p></li></ul></ul>
        <p>
            Java
        </p>
        <pre class="programlisting"><strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">class</span></strong> PetList <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">extends</span></strong> PetListAbstract
{
    <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> play()
    {
        <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">this</span></strong>.asGscList().each(<strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">new</span></strong> Procedure&lt;Pet&gt;()
        {
            <em  xmlns:xslthl="http://xslthl.sf.net"><span style="color: gray" class="hl-annotation">@Override</span></em>
            <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">public</span></strong> <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-keyword"><span style="color: #000080">void</span></strong> value(Pet pet)
            {
                System.out.println(pet.getPetName()
                + <strong  xmlns:xslthl="http://xslthl.sf.net" class="hl-string"><span style="color: green">" plays with everyone"</span></strong>);
            }
        });
    }
}</pre>
    </div><a name="N10579"/><div class="slide">
        <h1 class="title">
            Create Reladomo Object from Scratch: Checklist
        </h1>
        <ul class=""><li class="listitem"><p>Create Reladomo Object XML file, e.g.
                    <code class="code">MyObject.xml</code>
                </p></li><ul class=""><li class="listitem"><p>Set PackageName, ClassName, and DefaultTableName</p></li><li class="listitem"><p>Add any AsOfAttributes as necessary, e.g. businessDate and processingDate</p></li><li class="listitem"><p>Mark Primary Key ID attributes with SimulatedSequences as needed</p></li><li class="listitem"><p>Add regular Attributes</p></li><li class="listitem"><p>Create Relationships as appropriate</p></li></ul><li class="listitem"><p>Add entry to Reladomo Class List file, e.g.
                    <code class="code">MithraTestAppClassList.xml</code>
                </p></li><li class="listitem"><p>Add entry to the Reladomo Runtime Configuration, e.g.
                    <code class="code">TestMithraRuntimeConfig.xml</code>
                </p></li><li class="listitem"><p>Compile and test; make sure you didn't break anything else</p></li><li class="listitem"><p>Write tests for your new object</p></li><ul class=""><li class="listitem"><p>Add data to your test data file, e.g.
                        <code class="code">data_ObjectFromScratch.txt</code>
                    </p></li></ul><li class="listitem"><p>Test again!</p></li></ul>
    </div><a name="N105B3"/><div class="slide">
        <h1 class="title">
            Exercise 4
        </h1>
        <ul class=""><li class="listitem"><p>Find tests starting with exercise4; they have failures.</p></li><li class="listitem"><p>Figure out how to get the tests to pass using what you have seen so far.</p></li><li class="listitem"><p>Should take about 20 minutes.</p></li></ul>
    </div><a name="N105C4"/><div class="slide">
        <h1 class="title">
            Additional Topics For Discussion
        </h1>
        <ul class=""><li class="listitem"><p>Sharding</p></li><li class="listitem"><p>Transactional semantics</p></li><li class="listitem"><p>Bitemporal operations</p></li><li class="listitem"><p>Reladomo's cache behavior in detail</p></li><li class="listitem"><p>Composite keys</p></li><li class="listitem"><p>Temp objects</p></li><li class="listitem"><p>Embedded value objects</p></li><li class="listitem"><p>3-tier operation</p></li><li class="listitem"><p>Notification</p></li><li class="listitem"><p>DDL generation</p></li><li class="listitem"><p>Existing schema -&gt; xml generation</p></li><li class="listitem"><p>Class diagram generation</p></li><li class="listitem"><p>RUNS integration</p></li><li class="listitem"><p>Bulk insert for ASE/IQ</p></li><li class="listitem"><p>Timezone conversion</p></li><li class="listitem"><p>Modifiable primary keys</p></li><li class="listitem"><p>Detached objects</p></li><li class="listitem"><p>Tuples</p></li><li class="listitem"><p>Update listener</p></li><li class="listitem"><p>Reladomo interfaces</p></li><li class="listitem"><p>MTloader/single queue executor in detail</p></li><li class="listitem"><p>Off-heap cache</p></li><li class="listitem"><p>Off-heap cache replication</p></li><li class="listitem"><p>Cache loader</p></li><li class="listitem"><p>DBextractor</p></li></ul>
    </div><a name="N10617"/><div class="slide">
        <h1 class="title">Further Information</h1>
        <p>
            <a class="ulink" href="https://github.com/goldmansachs/reladomo" target="_top">Reladomo on GitHub</a>
        </p>
        <p>
            <a class="ulink" href="https://goldmansachs.github.io/reladomo/" target="_top">Reladomo Documentation</a>
        </p>
        <p>
            <a class="ulink" href="https://github.com/goldmansachs/reladomo-kata" target="_top">Reladomo Kata</a>
            (note main and mini versions)
        </p>
    </div></body></html>